package com.mokelock.houseleasing.blockchain;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class HouseContract extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b50600080546001600160a01b031916331790556138cd806100326000396000f3fe60806040526004361061009c5760003560e01c806395a704291161006457806395a7042914610475578063a0ee6642146104a7578063cb659f7e146104e2578063df9d902414610628578063f24528ee14610805578063f940e385146108405761009c565b80636f00fb0d146100a15780637fa40baf146100d6578063841eff08146102a55780638fb14a82146102d7578063917fb8201461031c575b600080fd5b3480156100ad57600080fd5b506100d4600480360360208110156100c457600080fd5b50356001600160a01b031661087b565b005b3480156100e257600080fd5b50610291600480360360608110156100f957600080fd5b810190602081018135600160201b81111561011357600080fd5b82018360208201111561012557600080fd5b803590602001918460018302840111600160201b8311171561014657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561019857600080fd5b8201836020820111156101aa57600080fd5b803590602001918460018302840111600160201b831117156101cb57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561021d57600080fd5b82018360208201111561022f57600080fd5b803590602001918460018302840111600160201b8311171561025057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610e45945050505050565b604080519115158252519081900360200190f35b6100d4600480360360408110156102bb57600080fd5b5080356001600160a01b0316906020013563ffffffff16610ea5565b3480156102e357600080fd5b50610291600480360360608110156102fa57600080fd5b506001600160a01b038135811691602081013582169160409091013516611236565b34801561032857600080fd5b5061033161175f565b60405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561037657818101518382015260200161035e565b50505050905090810190601f1680156103a35780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156103d65781810151838201526020016103be565b50505050905090810190601f1680156104035780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561043657818101518382015260200161041e565b50505050905090810190601f1680156104635780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b6100d46004803603604081101561048b57600080fd5b5080356001600160a01b0316906020013563ffffffff16611919565b3480156104b357600080fd5b506100d4600480360360408110156104ca57600080fd5b506001600160a01b0381358116916020013516611ec8565b3480156104ee57600080fd5b506102916004803603606081101561050557600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561052f57600080fd5b82018360208201111561054157600080fd5b803590602001918460018302840111600160201b8311171561056257600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156105b457600080fd5b8201836020820111156105c657600080fd5b803590602001918460018302840111600160201b831117156105e757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612349945050505050565b34801561063457600080fd5b5061065b6004803603602081101561064b57600080fd5b50356001600160a01b03166123fe565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019080838360005b838110156106a457818101518382015260200161068c565b50505050905090810190601f1680156106d15780820380516001836020036101000a031916815260200191505b5085810384528851815288516020918201918a019080838360005b838110156107045781810151838201526020016106ec565b50505050905090810190601f1680156107315780820380516001836020036101000a031916815260200191505b50858103835287518152875160209182019189019080838360005b8381101561076457818101518382015260200161074c565b50505050905090810190601f1680156107915780820380516001836020036101000a031916815260200191505b50858103825286518152865160209182019188019080838360005b838110156107c45781810151838201526020016107ac565b50505050905090810190601f1680156107f15780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561081157600080fd5b506100d46004803603604081101561082857600080fd5b506001600160a01b03813581169160200135166126c1565b34801561084c57600080fd5b506102916004803603604081101561086357600080fd5b506001600160a01b0381358116916020013516612bbc565b8081600061088a833384612fed565b12156108c75760405162461bcd60e51b81526004018080602001828103825260258152602001806138746025913960400191505060405180910390fd5b60006108d4843386612fed565b90506002806000866001600160a01b03166001600160a01b03168152602001908152602001600020828154811061090757fe5b60009182526020909120600160069092020101805460ff60e81b1916600160e81b83600281111561093457fe5b02179055506109416136f7565b6001600160a01b038516808252336020808401919091526000918252600290526040902080548390811061097157fe5b6000918252602080832060069290920290910160010154600160a01b900463ffffffff166040848101919091526001600160a01b0388168352600290915290208054839081106109bd57fe5b6000918252602082206006919091020160010154600160c01b900463ffffffff1660608301526080820181905250600260a08201819052506001600160a01b0385166000908152600260205260409020805483908110610a1957fe5b600091825260208083206002600690930201820154610100850152600161016085015260036101808501526001600160a01b038816835252604090208054610c1b919084908110610a6657fe5b6000918252602091829020604080516101c081018252600690930290910180546001600160a01b03908116845260018201549081169484019490945263ffffffff600160a01b8504811692840192909252600160c01b840490911660608301529091608083019060ff600160e01b909104166002811115610ae357fe5b6002811115610aee57fe5b815260200160018201601d9054906101000a900460ff166002811115610b1057fe5b6002811115610b1b57fe5b815260200160018201601e9054906101000a900460ff166002811115610b3d57fe5b6002811115610b4857fe5b815260200160018201601f9054906101000a900460ff166002811115610b6a57fe5b6002811115610b7557fe5b8152600282015460208201526003820154604082015260048201546060820152600582015460809091019060ff166001811115610bae57fe5b6001811115610bb957fe5b81526020016005820160019054906101000a900460ff166004811115610bdb57fe5b6004811115610be657fe5b81526020016005820160029054906101000a900460ff166003811115610c0857fe5b6003811115610c1357fe5b90525061311d565b610c248161311d565b3360009081526002602081815260408084208054600180820180845592875295849020875160069092020180546001600160a01b03199081166001600160a01b039384161782559488015196810180549489015160608a015195909616979092169690961763ffffffff60a01b1916600160a01b63ffffffff958616021763ffffffff60c01b1916600160c01b94909316939093029190911780835560808601519194869490939160ff60e01b191690600160e01b908490811115610ce557fe5b021790555060a082015160018201805460ff60e81b1916600160e81b836002811115610d0d57fe5b021790555060c082015160018201805460ff60f01b1916600160f01b836002811115610d3557fe5b021790555060e08201516001820180546001600160f81b0316600160f81b836002811115610d5f57fe5b021790555061010082015160028201556101208201516003820155610140820151600482015561016082015160058201805460ff191660018381811115610da257fe5b021790555061018082015160058201805461ff001916610100836004811115610dc757fe5b02179055506101a082015160058201805462ff0000191662010000836003811115610dee57fe5b021790555050604080516001600160a01b0389168152336020820152428183015290517fe770033065ba584f30e591403b4c25a8840771aaf25b9d6b2e2f1f5b03000cd09350908190036060019150a15050505050565b600080546001600160a01b03163314610e5d57600080fd5b8351610e70906004906020870190613770565b508251610e84906005906020860190613770565b508151610e98906006906020850190613770565b50600190505b9392505050565b63ffffffff81163331811115610f02576040805162461bcd60e51b815260206004820152601a60248201527f796f75722062616c616e63652069736e277420656e6f75676821000000000000604482015290519081900360640190fd5b33836000610f11838385612fed565b128015610f2857506000610f268383856131b8565b125b610f79576040805162461bcd60e51b815260206004820152601c60248201527f6f6e65207375626d6974206f6e6c7920637265617465206f6e63653b00000000604482015290519081900360640190fd5b610f816136f7565b338082526001600160a01b03878116602080850191825263ffffffff8981166040808801918252600060808901818152426101008b01526101608a018290526101808a0182905260016101a08b0181905298825260028087529282208054808b01808355918452969092208a5160069097020180549689166001600160a01b031997881617815596519887018054945160608c01518716600160c01b0263ffffffff60c01b1991909716600160a01b0263ffffffff60a01b199b909a169590971694909417989098169690961793909316919091178082559451939486949260ff60e01b1990911690600160e01b90849081111561107b57fe5b021790555060a082015160018201805460ff60e81b1916600160e81b8360028111156110a357fe5b021790555060c082015160018201805460ff60f01b1916600160f01b8360028111156110cb57fe5b021790555060e08201516001820180546001600160f81b0316600160f81b8360028111156110f557fe5b021790555061010082015160028201556101208201516003820155610140820151600482015561016082015160058201805460ff19166001838181111561113857fe5b021790555061018082015160058201805461ff00191661010083600481111561115d57fe5b02179055506101a082015160058201805462ff000019166201000083600381111561118457fe5b021790555050600080546040516001600160a01b03909116935063ffffffff891680156108fc02935091818181858888f193505050501580156111cb573d6000803e3d6000fd5b5033600081815260016020908152604091829020805463ffffffff8a1601905581519283526001600160a01b038916908301524282820152517fb5cb67354ef2ecb28f8ca1074182e5920fb395d1836c09b4e95ab4c6c20bbf6f9181900360600190a1505050505050565b600080546001600160a01b0316331461124e57600080fd5b600080600061125e8787876132dd565b92508212611756576001600160a01b038416600090815260026020526040812080548490811061128a57fe5b600091825260209091206005600690920201015460ff1660018111156112ac57fe5b1415611500576112bd8686876132dd565b90506002806000866001600160a01b03166001600160a01b0316815260200190815260200160002083815481106112f057fe5b60009182526020909120600560069092020101805462ff000019166201000083600381111561131b57fe5b02179055506001600160a01b03851660009081526002602052604090208054600391908390811061134857fe5b60009182526020909120600560069092020101805462ff000019166201000083600381111561137357fe5b02179055506001600160a01b038416600081815260026020526040902080546108fc9190859081106113a157fe5b906000526020600020906006020160010160189054906101000a900463ffffffff1660026000886001600160a01b03166001600160a01b0316815260200190815260200160002085815481106113f357fe5b906000526020600020906006020160010160149054906101000a900463ffffffff160163ffffffff169081150290604051600060405180830381858888f193505050506114f5576001600160a01b03841660009081526002602052604090208054600191908490811061146257fe5b60009182526020909120600560069092020101805462ff000019166201000083600381111561148d57fe5b02179055506001600160a01b0385166000908152600260205260409020805460019190839081106114ba57fe5b60009182526020909120600560069092020101805462ff00001916620100008360038111156114e557fe5b0217905550600092505050610e9e565b600192505050610e9e565b60016001600160a01b038516600090815260026020526040902080548490811061152657fe5b600091825260209091206005600690920201015460ff16600181111561154857fe5b1415611756576115598686886132dd565b90506002806000866001600160a01b03166001600160a01b03168152602001908152602001600020838154811061158c57fe5b60009182526020909120600560069092020101805462ff00001916620100008360038111156115b757fe5b02179055506001600160a01b0386166000908152600260205260409020805460039190839081106115e457fe5b60009182526020909120600560069092020101805462ff000019166201000083600381111561160f57fe5b02179055506001600160a01b038416600081815260026020526040902080546108fc91908590811061163d57fe5b906000526020600020906006020160010160189054906101000a900463ffffffff1660026000886001600160a01b03166001600160a01b03168152602001908152602001600020858154811061168f57fe5b906000526020600020906006020160010160149054906101000a900463ffffffff160163ffffffff169081150290604051600060405180830381858888f193505050506114f5576001600160a01b0384166000908152600260205260409020805460019190849081106116fe57fe5b60009182526020909120600560069092020101805462ff000019166201000083600381111561172957fe5b02179055506001600160a01b0386166000908152600260205260409020805460019190839081106114ba57fe5b50509392505050565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093849384938301828280156117eb5780601f106117c0576101008083540402835291602001916117eb565b820191906000526020600020905b8154815290600101906020018083116117ce57829003601f168201915b505060058054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529699509194509250840190508282801561187c5780601f106118515761010080835404028352916020019161187c565b820191906000526020600020905b81548152906001019060200180831161185f57829003601f168201915b505060068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529698509194509250840190508282801561190d5780601f106118e25761010080835404028352916020019161190d565b820191906000526020600020905b8154815290600101906020018083116118f057829003601f168201915b50505050509050909192565b63ffffffff81163331811115611976576040805162461bcd60e51b815260206004820152601a60248201527f796f75722062616c616e63652069736e277420656e6f75676821000000000000604482015290519081900360640190fd5b82836000611985833384612fed565b12156119c25760405162461bcd60e51b81526004018080602001828103825260258152602001806138746025913960400191505060405180910390fd5b60006119cf863388612fed565b6001600160a01b038716600090815260026020526040902080549192508691839081106119f857fe5b906000526020600020906006020160010160186101000a81548163ffffffff021916908363ffffffff160217905550600060026000886001600160a01b03166001600160a01b031681526020019081526020016000208281548110611a5957fe5b60009182526020909120600160069092020101805460ff60e81b1916600160e81b836002811115611a8657fe5b02179055506001600160a01b0386166000908152600260205260409020805442919083908110611ab257fe5b906000526020600020906006020160030181905550600160026000886001600160a01b03166001600160a01b031681526020019081526020016000208281548110611af957fe5b60009182526020909120600560069092020101805461ff001916610100836004811115611b2257fe5b0217905550611b2f6136f7565b6001600160a01b0387168082523360208084019190915260009182526002905260409020805483908110611b5f57fe5b6000918252602080832060069290920290910160010154600160a01b900463ffffffff166040848101919091526001600160a01b038a16835260029091529020805483908110611bab57fe5b6000918252602082206006919091020160010154600160c01b900463ffffffff1660608301526080820181905250600060a08201819052506001600160a01b0387166000908152600260205260409020805483908110611c0757fe5b6000918252602090912060069091020160020154610100820152426101208201526001610160820181905250600161018082018190525060016101a08201819052503360009081526002602081815260408084208054600180820180845592875295849020875160069092020180546001600160a01b03199081166001600160a01b039384161782559488015196810180549489015160608a015195909616979092169690961763ffffffff60a01b1916600160a01b63ffffffff958616021763ffffffff60c01b1916600160c01b94909316939093029190911780835560808601519194869490939160ff60e01b191690600160e01b908490811115611d0a57fe5b021790555060a082015160018201805460ff60e81b1916600160e81b836002811115611d3257fe5b021790555060c082015160018201805460ff60f01b1916600160f01b836002811115611d5a57fe5b021790555060e08201516001820180546001600160f81b0316600160f81b836002811115611d8457fe5b021790555061010082015160028201556101208201516003820155610140820151600482015561016082015160058201805460ff191660018381811115611dc757fe5b021790555061018082015160058201805461ff001916610100836004811115611dec57fe5b02179055506101a082015160058201805462ff0000191662010000836003811115611e1357fe5b021790555050600080546040516001600160a01b03909116935063ffffffff8a1680156108fc02935091818181858888f19350505050158015611e5a573d6000803e3d6000fd5b5033600081815260016020908152604091829020805463ffffffff8b1601905581516001600160a01b038b168152908101929092524282820152517f86b1cca0cd9557e82b8815a943b3d522f1a846ed3b9d9a335cd240c11359cf629181900360600190a150505050505050565b8181336000611ed88484846131b8565b1215611f25576040805162461bcd60e51b815260206004820152601760248201527621b7b73a3930b1ba1034b9903737ba1032b33332b1ba1760491b604482015290519081900360640190fd5b6000611f328686336131b8565b90506000611f418787896131b8565b90506000611f508888896131b8565b90506000336000908152600260205260409020805485908110611f6f57fe5b600091825260209091206005600690920201015460ff166001811115611f9157fe5b141561204557336000908152600260208190526040909120805485908110611fb557fe5b60009182526020909120600160069092020101805460ff60f01b1916600160f01b836002811115611fe257fe5b02179055506001600160a01b038716600090815260026020819052604090912080548390811061200e57fe5b60009182526020909120600160069092020101805460ff60f01b1916600160f01b83600281111561203b57fe5b0217905550612138565b600133600090815260026020526040902080548590811061206257fe5b600091825260209091206005600690920201015460ff16600181111561208457fe5b1415612138573360009081526002602081905260409091208054859081106120a857fe5b6000918252602090912060016006909202010180546001600160f81b0316600160f81b8360028111156120d757fe5b02179055506001600160a01b038816600090815260026020819052604090912080548490811061210357fe5b6000918252602090912060016006909202010180546001600160f81b0316600160f81b83600281111561213257fe5b02179055505b6001600160a01b0388166000908152600260205260409020805461231691908490811061216157fe5b6000918252602091829020604080516101c081018252600690930290910180546001600160a01b03908116845260018201549081169484019490945263ffffffff600160a01b8504811692840192909252600160c01b840490911660608301529091608083019060ff600160e01b9091041660028111156121de57fe5b60028111156121e957fe5b815260200160018201601d9054906101000a900460ff16600281111561220b57fe5b600281111561221657fe5b815260200160018201601e9054906101000a900460ff16600281111561223857fe5b600281111561224357fe5b815260200160018201601f9054906101000a900460ff16600281111561226557fe5b600281111561227057fe5b8152600282015460208201526003820154604082015260048201546060820152600582015460809091019060ff1660018111156122a957fe5b60018111156122b457fe5b81526020016005820160019054906101000a900460ff1660048111156122d657fe5b60048111156122e157fe5b81526020016005820160029054906101000a900460ff16600381111561230357fe5b600381111561230e57fe5b90525061345b565b6001600160a01b0387166000908152600260205260409020805461233f91908390811061216157fe5b5050505050505050565b6000836001600160a01b03811633146123935760405162461bcd60e51b815260040180806020018281038252602a81526020018061384a602a913960400191505060405180910390fd5b6001600160a01b038516600090815260036020818152604090922086516123c293919092019190870190613770565b506001600160a01b038516600090815260036020908152604090912084516123f292600490920191860190613770565b50600195945050505050565b6001600160a01b03811660009081526003602090815260409182902080548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845260609384938493849390918301828280156124a45780601f10612479576101008083540402835291602001916124a4565b820191906000526020600020905b81548152906001019060200180831161248757829003601f168201915b5050505050935060036000866001600160a01b03166001600160a01b031681526020019081526020016000206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125675780601f1061253c57610100808354040283529160200191612567565b820191906000526020600020905b81548152906001019060200180831161254a57829003601f168201915b505050506001600160a01b0387166000908152600360208181526040928390209091018054835160026001831615610100026000190190921691909104601f8101849004840282018401909452838152949750925083018282801561260d5780601f106125e25761010080835404028352916020019161260d565b820191906000526020600020905b8154815290600101906020018083116125f057829003601f168201915b505050506001600160a01b0387166000908152600360209081526040918290206004018054835160026001831615610100026000190190921691909104601f810184900484028201840190945283815294965092508301828280156126b35780601f10612688576101008083540402835291602001916126b3565b820191906000526020600020905b81548152906001019060200180831161269657829003601f168201915b505050505090509193509193565b81813360006126d18484846131b8565b121561271e576040805162461bcd60e51b815260206004820152601760248201527621b7b73a3930b1ba1034b9903737ba1032b33332b1ba1760491b604482015290519081900360640190fd5b600061272b8686336131b8565b9050600061273a8787896131b8565b905060006127498888896131b8565b9050600033600090815260026020526040902080548590811061276857fe5b600091825260209091206005600690920201015460ff16600181111561278a57fe5b1415612838573360009081526002602052604081208054859081106127ab57fe5b60009182526020909120600160069092020101805460ff60f01b1916600160f01b8360028111156127d857fe5b02179055506001600160a01b038716600090815260026020526040812080548390811061280157fe5b60009182526020909120600160069092020101805460ff60f01b1916600160f01b83600281111561282e57fe5b0217905550612915565b600133600090815260026020526040902080548590811061285557fe5b600091825260209091206005600690920201015460ff16600181111561287757fe5b14156129155733600090815260026020526040812080548590811061289857fe5b9060005260206000209060060201600101601f9054906101000a900460ff1660028111156128c257fe5b50506001600160a01b03881660009081526002602052604081208054849081106128e857fe5b9060005260206000209060060201600101601f9054906101000a900460ff16600281111561291257fe5b50505b6001600160a01b03881660009081526002602052604090208054612af391908490811061293e57fe5b6000918252602091829020604080516101c081018252600690930290910180546001600160a01b03908116845260018201549081169484019490945263ffffffff600160a01b8504811692840192909252600160c01b840490911660608301529091608083019060ff600160e01b9091041660028111156129bb57fe5b60028111156129c657fe5b815260200160018201601d9054906101000a900460ff1660028111156129e857fe5b60028111156129f357fe5b815260200160018201601e9054906101000a900460ff166002811115612a1557fe5b6002811115612a2057fe5b815260200160018201601f9054906101000a900460ff166002811115612a4257fe5b6002811115612a4d57fe5b8152600282015460208201526003820154604082015260048201546060820152600582015460809091019060ff166001811115612a8657fe5b6001811115612a9157fe5b81526020016005820160019054906101000a900460ff166004811115612ab357fe5b6004811115612abe57fe5b81526020016005820160029054906101000a900460ff166003811115612ae057fe5b6003811115612aeb57fe5b9052506134e6565b6001600160a01b03871660009081526002602052604090208054612b1c91908390811061293e57fe5b6002336000908152600260205260409020805485908110612b3957fe5b906000526020600020906006020160050160019054906101000a900460ff166004811115612b6357fe5b141561233f57604080516001600160a01b03808b16825289166020820152428183015290517f63d73c59812e0b0532f0e036120650605de7c03e6d017902553f5e3f2f22a7e69181900360600190a15050505050505050565b600082826000612bcd838333613579565b121580612be557506000612be2838333613579565b12155b612c205760405162461bcd60e51b815260040180806020018281038252603e81526020018061380c603e913960400191505060405180910390fd5b6000612c2d868633613579565b3360009081526002602081905260409091208054929350909183908110612c5057fe5b60009182526020909120600560069092020101805462ff0000191662010000836003811115612c7b57fe5b0217905550336000908152600260205260408120805483908110612c9b57fe5b600091825260209091206005600690920201015460ff166001811115612cbd57fe5b148015612d155750336000908152600260205260409020805482908110612ce057fe5b60009182526020808320600160069093020182015433845291905260409091205463ffffffff600160a01b9092049190911611155b15612e7957336000908152600260205260409020805482908110612d3557fe5b600091825260208083206001600690930201820154338085529282526040808520805463ffffffff600160a01b90940493909316909203909155600290915290912080546108fc919084908110612d8857fe5b6000918252602082206006919091020160010154604051600160a01b90910463ffffffff168015939093029291818181858888f19350505050612e6f5733600090815260026020526040902080546001919083908110612de457fe5b60009182526020909120600560069092020101805462ff0000191662010000836003811115612e0f57fe5b0217905550336000908152600260205260409020805482908110612e2f57fe5b600091825260208083206006929092029091016001908101543384529152604082208054600160a01b90920463ffffffff1690910190559350612fe59050565b6001935050612fe5565b6001336000908152600260205260409020805483908110612e9657fe5b600091825260209091206005600690920201015460ff166001811115612eb857fe5b148015612f105750336000908152600260205260409020805482908110612edb57fe5b60009182526020808320600160069093020182015433845291905260409091205463ffffffff600160c01b9092049190911611155b15612fdf57336000908152600260205260409020805482908110612f3057fe5b600091825260208083206001600690930201820154338085529282526040808520805463ffffffff600160a01b90940493909316909203909155600290915290912080546108fc919084908110612f8357fe5b6000918252602082206006919091020160010154604051600160c01b90910463ffffffff168015939093029291818181858888f19350505050612e6f5733600090815260026020526040902080546001919083908110612de457fe5b60009350505b505092915050565b6001600160a01b038116600090815260026020526040812054815b81811015613110576001600160a01b0384811660009081526002602052604090208054918816918390811061303957fe5b60009182526020909120600690910201546001600160a01b03161480156130a357506001600160a01b0384811660009081526002602052604090208054918716918390811061308457fe5b60009182526020909120600160069092020101546001600160a01b0316145b80156130fa57506001600160a01b03861660009081526002602052604081208054839081106130ce57fe5b906000526020600020906006020160050160019054906101000a900460ff1660048111156130f857fe5b145b15613108579150610e9e9050565b600101613008565b5060001995945050505050565b8060028160800151600281111561313057fe5b148061314b575060028160a00151600281111561314957fe5b145b61319c576040805162461bcd60e51b815260206004820152601e60248201527f5468697320636f6e747261637473206973207374696c6c207375626d69740000604482015290519081900360640190fd5b610180820160035b908160048111156131b157fe5b9052505050565b6001600160a01b038116600090815260026020526040812054815b81811015613110576001600160a01b0384811660009081526002602052604090208054918816918390811061320457fe5b60009182526020909120600690910201546001600160a01b031614801561326e57506001600160a01b0384811660009081526002602052604090208054918716918390811061324f57fe5b60009182526020909120600160069092020101546001600160a01b0316145b80156132c7575060016001600160a01b038516600090815260026020526040902080548390811061329b57fe5b906000526020600020906006020160050160019054906101000a900460ff1660048111156132c557fe5b145b156132d5579150610e9e9050565b6001016131d3565b6001600160a01b038116600090815260026020526040812054815b81811015611756576001600160a01b0384811660009081526002602052604090208054918816918390811061332957fe5b60009182526020909120600690910201546001600160a01b031614801561339357506001600160a01b0384811660009081526002602052604090208054918716918390811061337457fe5b60009182526020909120600160069092020101546001600160a01b0316145b80156133ec575060046001600160a01b03851660009081526002602052604090208054839081106133c057fe5b906000526020600020906006020160050160019054906101000a900460ff1660048111156133ea57fe5b145b8015613445575060016001600160a01b038516600090815260026020526040902080548390811061341957fe5b906000526020600020906006020160050160029054906101000a900460ff16600381111561344357fe5b145b15613453579150610e9e9050565b6001016132f8565b8060028160c00151600281111561346e57fe5b1480613489575060028160e00151600281111561348757fe5b145b6134da576040805162461bcd60e51b815260206004820152601e60248201527f54686520636f6e747261637473206973207374696c6c206566666563743b0000604482015290519081900360640190fd5b610180820160046131a4565b8060008160c0015160028111156134f957fe5b148015613515575060008160e00151600281111561351357fe5b145b613566576040805162461bcd60e51b815260206004820152601760248201527f436f6e7472616374206973206e6f742066696e73686564000000000000000000604482015290519081900360640190fd5b5060026101808201524261014090910152565b6001600160a01b038116600090815260026020526040812054815b81811015613110576001600160a01b038481166000908152600260205260409020805491881691839081106135c557fe5b60009182526020909120600690910201546001600160a01b031614801561362f57506001600160a01b0384811660009081526002602052604090208054918716918390811061361057fe5b60009182526020909120600160069092020101546001600160a01b0316145b8015613688575060026001600160a01b038516600090815260026020526040902080548390811061365c57fe5b906000526020600020906006020160050160019054906101000a900460ff16600481111561368657fe5b145b80156136e1575060016001600160a01b03851660009081526002602052604090208054839081106136b557fe5b906000526020600020906006020160050160029054906101000a900460ff1660038111156136df57fe5b145b156136ef579150610e9e9050565b600101613594565b604080516101c0810182526000808252602082018190529181018290526060810182905290608082019081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000600181111561375d57fe5b8152602001600081526020016000905290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106137b157805160ff19168380011785556137de565b828001600101855582156137de579182015b828111156137de5782518255916020019190600101906137c3565b506137ea9291506137ee565b5090565b61380891905b808211156137ea57600081556001016137f4565b9056fe596f752068617665206e6f20636f6e7472616e63747320736174697366792074686573653a66696e697368656420616e64207375626d6974206d6f6e65796f6e6c7920757365722063616e206368616e676520746865697273656c6620696e666f726d6174696f6e6f6e6c79207265636970656e742063616e20726573706f6e6420746865207375626d697421a265627a7a723058204df57aa255d0d547698aa3bc0abc90cb3f96e737ac438750384d0f3ad5258f7564736f6c634300050a0032";

    public static final String FUNC_REJECTORDER = "rejectOrder";

    public static final String FUNC_POSTADMINTABLE = "postAdminTable";

    public static final String FUNC_SUBMITORDER = "submitOrder";

    public static final String FUNC_WITHDRAWAPPEAL = "withdrawAppeal";

    public static final String FUNC_FINDADMINTABLE = "findAdminTable";

    public static final String FUNC_RESPONDORDER = "respondOrder";

    public static final String FUNC_REJECTSECOND = "rejectSecond";

    public static final String FUNC_POSTUSER = "postUser";

    public static final String FUNC_FINDUSER = "findUser";

    public static final String FUNC_CONFIRMSECOND = "confirmSecond";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event ORDERSUBMITED_EVENT = new Event("OrderSubmited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ORDEREFFECT_EVENT = new Event("OrderEffect",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ORDERREJECTED_EVENT = new Event("OrderRejected",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ORDERFINISHED_EVENT = new Event("OrderFinished",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event ORDERFAILED_EVENT = new Event("OrderFailed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DEPOSITWITHDRAW_EVENT = new Event("DepositWithdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected HouseContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HouseContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HouseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HouseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<TransactionReceipt> rejectOrder(String _submiter) {
        final Function function = new Function(
                FUNC_REJECTORDER, 
                Arrays.<Type>asList(new Address(_submiter)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postAdminTable(String user_account, String account_house_online, String account_house_downline) {
        final Function function = new Function(
                FUNC_POSTADMINTABLE, 
                Arrays.<Type>asList(new Utf8String(user_account),
                new Utf8String(account_house_online),
                new Utf8String(account_house_downline)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> submitOrder(String _aimer, BigInteger coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_SUBMITORDER, 
                Arrays.<Type>asList(new Address(_aimer),
                new org.web3j.abi.datatypes.generated.Uint32(coins)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> withdrawAppeal(String _submiter, String _aimer, String _appealer) {
        final Function function = new Function(
                FUNC_WITHDRAWAPPEAL, 
                Arrays.<Type>asList(new Address(_submiter),
                new Address(_aimer),
                new Address(_appealer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<String, String, String>> findAdminTable() {
        final Function function = new Function(FUNC_FINDADMINTABLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<String, String, String>>(
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> respondOrder(String _submiter, BigInteger coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RESPONDORDER, 
                Arrays.<Type>asList(new Address(_submiter),
                new org.web3j.abi.datatypes.generated.Uint32(coins)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> rejectSecond(String _submiter, String _aimer) {
        final Function function = new Function(
                FUNC_REJECTSECOND, 
                Arrays.<Type>asList(new Address(_submiter),
                new Address(_aimer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postUser(String _who, String IPFS_hash, String phone) {
        final Function function = new Function(
                FUNC_POSTUSER, 
                Arrays.<Type>asList(new Address(_who),
                new Utf8String(IPFS_hash),
                new Utf8String(phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<String, String, String, String>> findUser(String _who) {
        final Function function = new Function(FUNC_FINDUSER,
                Arrays.<Type>asList(new Address(_who)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple4<String, String, String, String>>(
                new Callable<Tuple4<String, String, String, String>>() {
                    @Override
                    public Tuple4<String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> confirmSecond(String _submiter, String _aimer) {
        final Function function = new Function(
                FUNC_CONFIRMSECOND, 
                Arrays.<Type>asList(new Address(_submiter),
                new Address(_aimer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(String _submiter, String _aimer) {
        final Function function = new Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Address(_submiter),
                new Address(_aimer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<OrderSubmitedEventResponse> getOrderSubmitedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERSUBMITED_EVENT, transactionReceipt);
        ArrayList<OrderSubmitedEventResponse> responses = new ArrayList<OrderSubmitedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderSubmitedEventResponse>() {
            @Override
            public OrderSubmitedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERSUBMITED_EVENT, log);
                OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERSUBMITED_EVENT));
        return orderSubmitedEventFlowable(filter);
    }

    public List<OrderEffectEventResponse> getOrderEffectEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDEREFFECT_EVENT, transactionReceipt);
        ArrayList<OrderEffectEventResponse> responses = new ArrayList<OrderEffectEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderEffectEventResponse>() {
            @Override
            public OrderEffectEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDEREFFECT_EVENT, log);
                OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDEREFFECT_EVENT));
        return orderEffectEventFlowable(filter);
    }

    public List<OrderRejectedEventResponse> getOrderRejectedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERREJECTED_EVENT, transactionReceipt);
        ArrayList<OrderRejectedEventResponse> responses = new ArrayList<OrderRejectedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderRejectedEventResponse>() {
            @Override
            public OrderRejectedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERREJECTED_EVENT, log);
                OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERREJECTED_EVENT));
        return orderRejectedEventFlowable(filter);
    }

    public List<OrderFinishedEventResponse> getOrderFinishedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFINISHED_EVENT, transactionReceipt);
        ArrayList<OrderFinishedEventResponse> responses = new ArrayList<OrderFinishedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFinishedEventResponse>() {
            @Override
            public OrderFinishedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFINISHED_EVENT, log);
                OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFINISHED_EVENT));
        return orderFinishedEventFlowable(filter);
    }

    public List<OrderFailedEventResponse> getOrderFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFAILED_EVENT, transactionReceipt);
        ArrayList<OrderFailedEventResponse> responses = new ArrayList<OrderFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFailedEventResponse>() {
            @Override
            public OrderFailedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFAILED_EVENT, log);
                OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFAILED_EVENT));
        return orderFailedEventFlowable(filter);
    }

    public List<DepositWithdrawEventResponse> getDepositWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawEventResponse> responses = new ArrayList<DepositWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawEventResponse>() {
            @Override
            public DepositWithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, log);
                DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAW_EVENT));
        return depositWithdrawEventFlowable(filter);
    }

    @Deprecated
    public static HouseContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HouseContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HouseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HouseContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HouseContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HouseContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HouseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HouseContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HouseContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HouseContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<HouseContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HouseContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HouseContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HouseContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HouseContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HouseContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OrderSubmitedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderEffectEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderRejectedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderFinishedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderFailedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class DepositWithdrawEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }
}
