package com.mokelock.houseleasing.blockchain;

import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class HouseContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_FINDORDER_1 = "findOrder_1";

    public static final String FUNC_FINDEND_NORETURNED_OREDER = "findEnd_noReturned_oreder";

    public static final String FUNC_FINDSUB_ORDER = "findSub_order";

    public static final String FUNC_FINDACCOUNT_HOUSE_DOWNLINE = "findAccount_house_downline";

    public static final String FUNC_FINDACCOUNT_HOUSE_ONLINE = "findAccount_house_online";

    public static final String FUNC_POSTACCOUNT_HOUSE_DOWNLINE = "postAccount_house_downline";

    public static final String FUNC_FINDEFF_ORDER = "findEff_order";

    public static final String FUNC_REJECTORDER = "rejectOrder";

    public static final String FUNC_POSTADMINTABLE = "postAdminTable";

    public static final String FUNC_SUBMITORDER = "submitOrder";

    public static final String FUNC_FINDORDERSNUM = "findOrdersNum";

    public static final String FUNC_WITHDRAWAPPEAL = "withdrawAppeal";

    public static final String FUNC_FINDADMINTABLE = "findAdminTable";

    public static final String FUNC_RESPONDORDER = "respondOrder";

    public static final String FUNC_REJECTSECOND = "rejectSecond";

    public static final String FUNC_FINDUSER_ACCOUNT_TABLE = "findUser_account_table";

    public static final String FUNC_FINDFAILED_NORETURNED_ORDERER = "findFailed_noReturned_orderer";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_POSTUSER = "postUser";

    public static final String FUNC_POSTACCOUNT_HOUSE_ONLINE = "postAccount_house_online";

    public static final String FUNC_FINDUSER = "findUser";

    public static final String FUNC_POSTUSER_ACCOUNT = "postUser_account";

    public static final String FUNC_FINDORDER_2 = "findOrder_2";

    public static final String FUNC_POSTUSERIPFS_HASH = "postUserIPFS_hash";

    public static final String FUNC_CONFIRMSECOND = "confirmSecond";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_POSTUSERPHONE = "postUserPhone";

    public static final Event ORDERSUBMITED_EVENT = new Event("OrderSubmited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDEREFFECT_EVENT = new Event("OrderEffect",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERREJECTED_EVENT = new Event("OrderRejected",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERFINISHED_EVENT = new Event("OrderFinished",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERFAILED_EVENT = new Event("OrderFailed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event DEPOSITWITHDRAW_EVENT = new Event("DepositWithdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    @Deprecated
    protected HouseContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HouseContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HouseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HouseContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple8<Address, Address, Uint32, Uint32, Uint8, Uint8, Uint8, Uint8>> findOrder_1(Address _user, Uint256 location) {
        final Function function = new Function(FUNC_FINDORDER_1,
                Arrays.<Type>asList(_user, location),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint32>() {
                }, new TypeReference<Uint32>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple8<Address, Address, Uint32, Uint32, Uint8, Uint8, Uint8, Uint8>>(
                new Callable<Tuple8<Address, Address, Uint32, Uint32, Uint8, Uint8, Uint8, Uint8>>() {
                    @Override
                    public Tuple8<Address, Address, Uint32, Uint32, Uint8, Uint8, Uint8, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<Address, Address, Uint32, Uint32, Uint8, Uint8, Uint8, Uint8>(
                                (Address) results.get(0),
                                (Address) results.get(1),
                                (Uint32) results.get(2),
                                (Uint32) results.get(3),
                                (Uint8) results.get(4),
                                (Uint8) results.get(5),
                                (Uint8) results.get(6),
                                (Uint8) results.get(7));
                    }
                });
    }

    public RemoteCall<Int256> findEnd_noReturned_oreder(Address _submiter, Address _aimer, Address _from) {
        final Function function = new Function(FUNC_FINDEND_NORETURNED_OREDER,
                Arrays.<Type>asList(_submiter, _aimer, _from),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Int256> findSub_order(Address _submiter, Address _aimer, Address _from) {
        final Function function = new Function(FUNC_FINDSUB_ORDER,
                Arrays.<Type>asList(_submiter, _aimer, _from),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> findAccount_house_downline() {
        final Function function = new Function(FUNC_FINDACCOUNT_HOUSE_DOWNLINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Utf8String> findAccount_house_online() {
        final Function function = new Function(FUNC_FINDACCOUNT_HOUSE_ONLINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> postAccount_house_downline(Utf8String account_house_downline) {
        final Function function = new Function(
                FUNC_POSTACCOUNT_HOUSE_DOWNLINE,
                Arrays.<Type>asList(account_house_downline),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Int256> findEff_order(Address _submiter, Address _aimer, Address _from) {
        final Function function = new Function(FUNC_FINDEFF_ORDER,
                Arrays.<Type>asList(_submiter, _aimer, _from),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> rejectOrder(Address _submiter) {
        final Function function = new Function(
                FUNC_REJECTORDER,
                Arrays.<Type>asList(_submiter),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postAdminTable(Utf8String user_account, Utf8String account_house_online, Utf8String account_house_downline) {
        final Function function = new Function(
                FUNC_POSTADMINTABLE,
                Arrays.<Type>asList(user_account, account_house_online, account_house_downline),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> submitOrder(Address _aimer, Uint32 coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_SUBMITORDER,
                Arrays.<Type>asList(_aimer, coins),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> findOrdersNum(Address _user) {
        final Function function = new Function(
                FUNC_FINDORDERSNUM,
                Arrays.<Type>asList(_user),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdrawAppeal(Address _submiter, Address _aimer, Address _appealer) {
        final Function function = new Function(
                FUNC_WITHDRAWAPPEAL,
                Arrays.<Type>asList(_submiter, _aimer, _appealer),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<Utf8String, Utf8String, Utf8String>> findAdminTable() {
        final Function function = new Function(FUNC_FINDADMINTABLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteCall<Tuple3<Utf8String, Utf8String, Utf8String>>(
                new Callable<Tuple3<Utf8String, Utf8String, Utf8String>>() {
                    @Override
                    public Tuple3<Utf8String, Utf8String, Utf8String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Utf8String, Utf8String, Utf8String>(
                                (Utf8String) results.get(0),
                                (Utf8String) results.get(1),
                                (Utf8String) results.get(2));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> respondOrder(Address _submiter, Uint32 coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RESPONDORDER,
                Arrays.<Type>asList(_submiter, coins),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<TransactionReceipt> rejectSecond(Address _submiter, Address _aimer) {
        final Function function = new Function(
                FUNC_REJECTSECOND,
                Arrays.<Type>asList(_submiter, _aimer),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Utf8String> findUser_account_table() {
        final Function function = new Function(FUNC_FINDUSER_ACCOUNT_TABLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Int256> findFailed_noReturned_orderer(Address _submiter, Address _aimer, Address _from) {
        final Function function = new Function(FUNC_FINDFAILED_NORETURNED_ORDERER,
                Arrays.<Type>asList(_submiter, _aimer, _from),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addUser(Address _who, Utf8String name, Utf8String id, Utf8String IPFS_hash, Utf8String phone, Uint256 gender, Uint256 credit) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(_who, name, id, IPFS_hash, phone, gender, credit),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postUser(Address _who, Utf8String IPFS_hash, Utf8String phone) {
        final Function function = new Function(
                FUNC_POSTUSER,
                Arrays.<Type>asList(_who, IPFS_hash, phone),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postAccount_house_online(Utf8String account_house_online) {
        final Function function = new Function(
                FUNC_POSTACCOUNT_HOUSE_ONLINE,
                Arrays.<Type>asList(account_house_online),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint256, Uint256>> findUser(Address _who) {
        final Function function = new Function(FUNC_FINDUSER,
                Arrays.<Type>asList(_who),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteCall<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint256, Uint256>>(
                new Callable<Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint256, Uint256>>() {
                    @Override
                    public Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Utf8String, Utf8String, Utf8String, Utf8String, Uint256, Uint256>(
                                (Utf8String) results.get(0),
                                (Utf8String) results.get(1),
                                (Utf8String) results.get(2),
                                (Utf8String) results.get(3),
                                (Uint256) results.get(4),
                                (Uint256) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> postUser_account(Utf8String user_account) {
        final Function function = new Function(
                FUNC_POSTUSER_ACCOUNT,
                Arrays.<Type>asList(user_account),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<Uint256, Uint256, Uint256, Uint8, Uint8, Uint8>> findOrder_2(Address _user, Uint256 location) {
        final Function function = new Function(FUNC_FINDORDER_2,
                Arrays.<Type>asList(_user, location),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple6<Uint256, Uint256, Uint256, Uint8, Uint8, Uint8>>(
                new Callable<Tuple6<Uint256, Uint256, Uint256, Uint8, Uint8, Uint8>>() {
                    @Override
                    public Tuple6<Uint256, Uint256, Uint256, Uint8, Uint8, Uint8> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Uint256, Uint256, Uint256, Uint8, Uint8, Uint8>(
                                (Uint256) results.get(0),
                                (Uint256) results.get(1),
                                (Uint256) results.get(2),
                                (Uint8) results.get(3),
                                (Uint8) results.get(4),
                                (Uint8) results.get(5));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> postUserIPFS_hash(Address _who, Utf8String IPFS_hash) {
        final Function function = new Function(
                FUNC_POSTUSERIPFS_HASH,
                Arrays.<Type>asList(_who, IPFS_hash),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> confirmSecond(Address _submiter, Address _aimer) {
        final Function function = new Function(
                FUNC_CONFIRMSECOND,
                Arrays.<Type>asList(_submiter, _aimer),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(Address _submiter, Address _aimer) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(_submiter, _aimer),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postUserPhone(Address _who, Utf8String phone) {
        final Function function = new Function(
                FUNC_POSTUSERPHONE,
                Arrays.<Type>asList(_who, phone),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public List<OrderSubmitedEventResponse> getOrderSubmitedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERSUBMITED_EVENT, transactionReceipt);
        ArrayList<OrderSubmitedEventResponse> responses = new ArrayList<OrderSubmitedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderSubmitedEventResponse>() {
            @Override
            public OrderSubmitedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERSUBMITED_EVENT, log);
                OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERSUBMITED_EVENT));
        return orderSubmitedEventFlowable(filter);
    }

    public List<OrderEffectEventResponse> getOrderEffectEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDEREFFECT_EVENT, transactionReceipt);
        ArrayList<OrderEffectEventResponse> responses = new ArrayList<OrderEffectEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderEffectEventResponse>() {
            @Override
            public OrderEffectEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDEREFFECT_EVENT, log);
                OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDEREFFECT_EVENT));
        return orderEffectEventFlowable(filter);
    }

    public List<OrderRejectedEventResponse> getOrderRejectedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERREJECTED_EVENT, transactionReceipt);
        ArrayList<OrderRejectedEventResponse> responses = new ArrayList<OrderRejectedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderRejectedEventResponse>() {
            @Override
            public OrderRejectedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERREJECTED_EVENT, log);
                OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERREJECTED_EVENT));
        return orderRejectedEventFlowable(filter);
    }

    public List<OrderFinishedEventResponse> getOrderFinishedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFINISHED_EVENT, transactionReceipt);
        ArrayList<OrderFinishedEventResponse> responses = new ArrayList<OrderFinishedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFinishedEventResponse>() {
            @Override
            public OrderFinishedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFINISHED_EVENT, log);
                OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFINISHED_EVENT));
        return orderFinishedEventFlowable(filter);
    }

    public List<OrderFailedEventResponse> getOrderFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFAILED_EVENT, transactionReceipt);
        ArrayList<OrderFailedEventResponse> responses = new ArrayList<OrderFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFailedEventResponse>() {
            @Override
            public OrderFailedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFAILED_EVENT, log);
                OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFAILED_EVENT));
        return orderFailedEventFlowable(filter);
    }

    public List<DepositWithdrawEventResponse> getDepositWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawEventResponse> responses = new ArrayList<DepositWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
            typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawEventResponse>() {
            @Override
            public DepositWithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, log);
                DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse._aimer = (Address) eventValues.getNonIndexedValues().get(1);
                typedResponse._time = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAW_EVENT));
        return depositWithdrawEventFlowable(filter);
    }

    @Deprecated
    public static HouseContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HouseContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HouseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HouseContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HouseContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HouseContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HouseContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HouseContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HouseContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HouseContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<HouseContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HouseContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HouseContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HouseContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HouseContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HouseContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OrderSubmitedEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }

    public static class OrderEffectEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }

    public static class OrderRejectedEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }

    public static class OrderFinishedEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }

    public static class OrderFailedEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }

    public static class DepositWithdrawEventResponse {
        public Log log;

        public Address _submiter;

        public Address _aimer;

        public Uint256 _time;
    }
}
