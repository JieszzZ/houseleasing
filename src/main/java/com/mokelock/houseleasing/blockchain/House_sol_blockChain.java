package com.mokelock.houseleasing.blockchain;

import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint32;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple8;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.3.0.
 */
public class House_sol_blockChain extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_FINDORDER_1 = "findOrder_1";

    public static final String FUNC_FINDEND_NORETURNED_OREDER = "findEnd_noReturned_oreder";

    public static final String FUNC_FINDSUB_ORDER = "findSub_order";

    public static final String FUNC_FINDACCOUNT_HOUSE_DOWNLINE = "findAccount_house_downline";

    public static final String FUNC_FINDACCOUNT_HOUSE_ONLINE = "findAccount_house_online";

    public static final String FUNC_POSTACCOUNT_HOUSE_DOWNLINE = "postAccount_house_downline";

    public static final String FUNC_FINDEFF_ORDER = "findEff_order";

    public static final String FUNC_RESPONDORDER = "respondOrder";

    public static final String FUNC_FINDORDERSNUM = "findOrdersNum";

    public static final String FUNC_SUBMITORDER = "submitOrder";

    public static final String FUNC_FINDUSER_ACCOUNT_TABLE = "findUser_account_table";

    public static final String FUNC_FINDFAILED_NORETURNED_ORDERER = "findFailed_noReturned_orderer";

    public static final String FUNC_ADDUSER = "addUser";

    public static final String FUNC_POSTACCOUNT_HOUSE_ONLINE = "postAccount_house_online";

    public static final String FUNC_FINDUSER = "findUser";

    public static final String FUNC_POSTUSER_ACCOUNT = "postUser_account";

    public static final String FUNC_FINDORDER_2 = "findOrder_2";

    public static final String FUNC_RESSECOND = "resSecond";

    public static final String FUNC_POSTUSERPHONE = "postUserPhone";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final Event ORDERSUBMITED_EVENT = new Event("OrderSubmited",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDEREFFECT_EVENT = new Event("OrderEffect",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERREJECTED_EVENT = new Event("OrderRejected",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERFINISHED_EVENT = new Event("OrderFinished",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event ORDERFAILED_EVENT = new Event("OrderFailed",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event DEPOSITWITHDRAW_EVENT = new Event("DepositWithdraw",
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
            }, new TypeReference<Address>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    @Deprecated
    protected House_sol_blockChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected House_sol_blockChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected House_sol_blockChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected House_sol_blockChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> findOrder_1(String _user, BigInteger location) {
        final Function function = new Function(FUNC_FINDORDER_1,
                Arrays.<Type>asList(new Address(_user),
                        new Uint256(location)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint32>() {
                }, new TypeReference<Uint32>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteCall<Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple8<String, String, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> findEnd_noReturned_oreder(String _submiter, String _aimer, String _from) {
        final Function function = new Function(FUNC_FINDEND_NORETURNED_OREDER,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new Address(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> findSub_order(String _submiter, String _aimer, String _from) {
        final Function function = new Function(FUNC_FINDSUB_ORDER,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new Address(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> findAccount_house_downline() {
        final Function function = new Function(FUNC_FINDACCOUNT_HOUSE_DOWNLINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> findAccount_house_online() {
        final Function function = new Function(FUNC_FINDACCOUNT_HOUSE_ONLINE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> postAccount_house_downline(String account_house_downline) {
        final Function function = new Function(
                FUNC_POSTACCOUNT_HOUSE_DOWNLINE,
                Arrays.<Type>asList(new Utf8String(account_house_downline)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> findEff_order(String _submiter, String _aimer, String _from) {
        final Function function = new Function(FUNC_FINDEFF_ORDER,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new Address(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> respondOrder(String _submiter, Boolean res, BigInteger coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_RESPONDORDER,
                Arrays.<Type>asList(new Address(_submiter),
                        new org.web3j.abi.datatypes.Bool(res),
                        new Uint32(coins)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> findOrdersNum(String _user) {
        final Function function = new Function(FUNC_FINDORDERSNUM,
                Arrays.<Type>asList(new Address(_user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> submitOrder(String _aimer, String house_hash, BigInteger coins, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_SUBMITORDER,
                Arrays.<Type>asList(new Address(_aimer),
                        new Utf8String(house_hash),
                        new Uint32(coins)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> findUser_account_table() {
        final Function function = new Function(FUNC_FINDUSER_ACCOUNT_TABLE,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> findFailed_noReturned_orderer(String _submiter, String _aimer, String _from) {
        final Function function = new Function(FUNC_FINDFAILED_NORETURNED_ORDERER,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new Address(_from)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addUser(String _who, String name, String id, String IPFS_hash, String phone, BigInteger gender, BigInteger credit) {
        final Function function = new Function(
                FUNC_ADDUSER,
                Arrays.<Type>asList(new Address(_who),
                        new Utf8String(name),
                        new Utf8String(id),
                        new Utf8String(IPFS_hash),
                        new Utf8String(phone),
                        new Uint256(gender),
                        new Uint256(credit)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postAccount_house_online(String account_house_online) {
        final Function function = new Function(
                FUNC_POSTACCOUNT_HOUSE_ONLINE,
                Arrays.<Type>asList(new Utf8String(account_house_online)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple6<String, String, String, String, BigInteger, BigInteger>> findUser(String _who) {
        final Function function = new Function(FUNC_FINDUSER,
                Arrays.<Type>asList(new Address(_who)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }));
        return new RemoteCall<Tuple6<String, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> postUser_account(String user_account) {
        final Function function = new Function(
                FUNC_POSTUSER_ACCOUNT,
                Arrays.<Type>asList(new Utf8String(user_account)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>> findOrder_2(String _user, BigInteger location) {
        final Function function = new Function(FUNC_FINDORDER_2,
                Arrays.<Type>asList(new Address(_user),
                        new Uint256(location)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteCall<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>(
                new Callable<Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, String>(
                                (BigInteger) results.get(0).getValue(),
                                (BigInteger) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> resSecond(String _submiter, String _aimer, Boolean res) {
        final Function function = new Function(
                FUNC_RESSECOND,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new org.web3j.abi.datatypes.Bool(res)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> postUserPhone(String _who, String phone) {
        final Function function = new Function(
                FUNC_POSTUSERPHONE,
                Arrays.<Type>asList(new Address(_who),
                        new Utf8String(phone)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> withdraw(String _submiter, String _aimer, String _appealer, BigInteger weiValue) {
        final Function function = new Function(
                FUNC_WITHDRAW,
                Arrays.<Type>asList(new Address(_submiter),
                        new Address(_aimer),
                        new Address(_appealer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public List<OrderSubmitedEventResponse> getOrderSubmitedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERSUBMITED_EVENT, transactionReceipt);
        ArrayList<OrderSubmitedEventResponse> responses = new ArrayList<OrderSubmitedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderSubmitedEventResponse>() {
            @Override
            public OrderSubmitedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERSUBMITED_EVENT, log);
                OrderSubmitedEventResponse typedResponse = new OrderSubmitedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderSubmitedEventResponse> orderSubmitedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERSUBMITED_EVENT));
        return orderSubmitedEventFlowable(filter);
    }

    public List<OrderEffectEventResponse> getOrderEffectEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDEREFFECT_EVENT, transactionReceipt);
        ArrayList<OrderEffectEventResponse> responses = new ArrayList<OrderEffectEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderEffectEventResponse>() {
            @Override
            public OrderEffectEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDEREFFECT_EVENT, log);
                OrderEffectEventResponse typedResponse = new OrderEffectEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderEffectEventResponse> orderEffectEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDEREFFECT_EVENT));
        return orderEffectEventFlowable(filter);
    }

    public List<OrderRejectedEventResponse> getOrderRejectedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERREJECTED_EVENT, transactionReceipt);
        ArrayList<OrderRejectedEventResponse> responses = new ArrayList<OrderRejectedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderRejectedEventResponse>() {
            @Override
            public OrderRejectedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERREJECTED_EVENT, log);
                OrderRejectedEventResponse typedResponse = new OrderRejectedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderRejectedEventResponse> orderRejectedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERREJECTED_EVENT));
        return orderRejectedEventFlowable(filter);
    }

    public List<OrderFinishedEventResponse> getOrderFinishedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFINISHED_EVENT, transactionReceipt);
        ArrayList<OrderFinishedEventResponse> responses = new ArrayList<OrderFinishedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFinishedEventResponse>() {
            @Override
            public OrderFinishedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFINISHED_EVENT, log);
                OrderFinishedEventResponse typedResponse = new OrderFinishedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFinishedEventResponse> orderFinishedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFINISHED_EVENT));
        return orderFinishedEventFlowable(filter);
    }

    public List<OrderFailedEventResponse> getOrderFailedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(ORDERFAILED_EVENT, transactionReceipt);
        ArrayList<OrderFailedEventResponse> responses = new ArrayList<OrderFailedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OrderFailedEventResponse>() {
            @Override
            public OrderFailedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(ORDERFAILED_EVENT, log);
                OrderFailedEventResponse typedResponse = new OrderFailedEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OrderFailedEventResponse> orderFailedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ORDERFAILED_EVENT));
        return orderFailedEventFlowable(filter);
    }

    public List<DepositWithdrawEventResponse> getDepositWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, transactionReceipt);
        ArrayList<DepositWithdrawEventResponse> responses = new ArrayList<DepositWithdrawEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, DepositWithdrawEventResponse>() {
            @Override
            public DepositWithdrawEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSITWITHDRAW_EVENT, log);
                DepositWithdrawEventResponse typedResponse = new DepositWithdrawEventResponse();
                typedResponse.log = log;
                typedResponse._submiter = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._aimer = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._time = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositWithdrawEventResponse> depositWithdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSITWITHDRAW_EVENT));
        return depositWithdrawEventFlowable(filter);
    }

    @Deprecated
    public static House_sol_blockChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new House_sol_blockChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static House_sol_blockChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new House_sol_blockChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static House_sol_blockChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new House_sol_blockChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static House_sol_blockChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new House_sol_blockChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<House_sol_blockChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(House_sol_blockChain.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<House_sol_blockChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(House_sol_blockChain.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<House_sol_blockChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(House_sol_blockChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<House_sol_blockChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(House_sol_blockChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class OrderSubmitedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderEffectEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderRejectedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderFinishedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class OrderFailedEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }

    public static class DepositWithdrawEventResponse {
        public Log log;

        public String _submiter;

        public String _aimer;

        public BigInteger _time;
    }
}
